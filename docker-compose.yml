version: 'v2.30.3-desktop.1'  # Specify the version of Docker Compose

services:
  # Backend service
  backend:
    build:
      context: ./backend  # Path to the backend Dockerfile
      dockerfile: Dockerfile  # Explicitly specify Dockerfile name if it's not the default "Dockerfile"
    ports:
      - "3000:3000"  # Map container port to host port (adjust according to your backend's port)
    environment:
      - NODE_ENV=production  # Example environment variable for the backend
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=rootpassword
      - DB_NAME=groceryshare
    depends_on:
      - mysql
    networks:
      - app-network  # Use a custom network for both services to communicate if necessary

  # Frontend service
  frontend:
    build:
      context: ./frontend  # Path to the frontend Dockerfile
      dockerfile: Dockerfile  # Explicitly specify Dockerfile name if it's not the default "Dockerfile"
    ports:
      - "5173:5173"  # Map container port to host port (adjust according to your frontend's port)
    depends_on:
      - backend  # Ensure frontend starts after the backend (if needed)
    environment:
      - VITE_API_URL=http://localhost:3000 # Example environment variable for frontend to call backend API
    networks:
      - app-network  # Use the same custom network to allow communication between frontend and backend

  # MySQL db
  mysql:
    image: mysql:8.0  # Official MySQL Docker image
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: groceryshare
      MYSQL_USER: root 
      MYSQL_PASSWORD: rootpassword
    ports:
      - "3306:3306"  # Expose MySQL on port 3306
    volumes:
      - mysql_data:/var/lib/mysql  # Persist data in a volume
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      timeout: 20s
      retries: 10

  # Authentik
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .authentik.env
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.12.1}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    env_file:
      - .authentik.env
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.12.1}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .authentik.env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy

networks:
  app-network:  # Custom network for the app
    driver: bridge  # The default Docker network driver

volumes:
  mysql_data:  # Persistent volume for MySQL data
  database:
    driver: local
  redis:
    driver: local
