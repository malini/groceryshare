version: 'v2.30.3-desktop.1'  # Specify the version of Docker Compose

services:
  # Backend service
  backend:
    build:
      context: ./backend  # Path to the backend Dockerfile
      dockerfile: Dockerfile  # Explicitly specify Dockerfile name if it's not the default "Dockerfile"
    ports:
      - "3000:3000"  # Map container port to host port (adjust according to your backend's port)
    environment:
      - NODE_ENV=production  # Example environment variable for the backend
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=admin
      - DB_PASSWORD=adminpassword
      - DB_NAME=groceryshare
    depends_on:
      - mysql
    networks:
      - app-network  # Use a custom network for both services to communicate if necessary

  # Frontend service
  frontend:
    build:
      context: ./frontend  # Path to the frontend Dockerfile
      dockerfile: Dockerfile  # Explicitly specify Dockerfile name if it's not the default "Dockerfile"
    ports:
      - "5173:5173"  # Map container port to host port (adjust according to your frontend's port)
    depends_on:
      - backend  # Ensure frontend starts after the backend (if needed)
    environment:
      - VITE_API_URL=http://localhost:3000 # Example environment variable for frontend to call backend API
    networks:
      - app-network  # Use the same custom network to allow communication between frontend and backend

  # MySQL db
  mysql:
    image: mysql:8.0  # Official MySQL Docker image
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: adminpassword
      MYSQL_DATABASE: groceryshare
      MYSQL_USER: admin
      MYSQL_PASSWORD: adminpassword
    ports:
      - "3306:3306"  # Expose MySQL on port 3306
    volumes:
      - ./mysql_data:/var/lib/mysql  # Persist data in a volume
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      timeout: 20s
      retries: 10

  kcpostgres:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: pdb
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
  keycloak:
    image: quay.io/keycloak/keycloak:20.0
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://kcpostgres/pdb
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin
    ports:
      - 9999:8080
    command:
      - start-dev

networks:
  app-network:  # Custom network for the app
    driver: bridge  # The default Docker network driver

volumes:
  mysql_data:  # Persistent volume for MySQL data (groceryshare app)
  postgres_data:  # Persistent volume for postgres data (keycloak)
